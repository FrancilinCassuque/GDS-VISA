generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// datasource db {
//   provider     = "postgresql"
//   url          = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl    = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
//   relationMode = "prisma"
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  profile       Profile[]
  clientes      Client[]
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Profile {
  id       String  @id @default(uuid())
  bio      String? @default("")
  nome     String
  pais     String? @default("Angola")
  genero   String
  userId   String  @unique
  Apelido  String
  telefone String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user        User         @relation(fields: [userId], references: [id])
  identidades Identidade[]
  funcoes     Funcao[]
  Address     Address[]
  processos   Processo[]
  Factura     Factura[]

  @@index([userId])
}

model Identidade {
  id     String @id @default(cuid())
  tipo   String
  numero String @unique

  pessoa    Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String  @unique
}

model Funcao {
  id     Int    @id @default(autoincrement())
  funcao String @db.VarChar(50)

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  @@index([profileId])
}

model Processo {
  id           String @id @default(cuid())
  tipo         String
  preco        Int
  estado       String
  nomecompleto String
  passaport    String @unique @db.VarChar(15)
  descricao    String @default("") @db.Text

  anexos String[]

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([profileId])
}

model Client {
  id           String  @id @default(cuid())
  nomecompleto String
  telefone     String  @db.VarChar(30)
  descricao    String? @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  processos Processo[]
  userId    String
  user      User       @relation(fields: [userId], references: [id])
  Factura   Factura[]

  @@index([userId])
}

model Address {
  id        Int    @id @default(autoincrement())
  rua       String @db.VarChar(50)
  bairro    String @db.VarChar(50)
  comuna    String @db.VarChar(50)
  municipio String @db.VarChar(50)
  provincia String @db.VarChar(50)
  pais      String @db.VarChar(50)

  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

model Factura {
  id          String   @id @default(cuid())
  clientId    String
  cliente     Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  processosId String[]
  estado      String
  descricao   String

  total        Int
  desconto     Int
  valorApagar  Int
  valorEmFalta Int

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([profileId])
}
